//답
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

int pick(int* items, int itemSize, int* bucket, int bucketSize, int k)
{
	int i, lastIndex, smallest;
	int cnt = 0;
	int lastSelect; //중복 막아주는 변수

	if (k == 0) {
		for (i = 0; i < bucketSize; i++)
			printf("%d ", items[bucket[i]]);
		printf("\n");

		return 1;
	}

	lastIndex = bucketSize - k - 1;

	if (bucketSize == k)
		smallest = 0;
	else
		smallest = bucket[lastIndex] + 1;

	lastSelect = -1; //중복을 막는, 절대 나오지 않을 값
	for (i = smallest; i < itemSize; i++) {
		if (lastSelect != items[i]) {
			lastSelect = items[i];

			bucket[lastIndex + 1] = i;
			cnt += pick(items, itemSize, bucket, bucketSize, k - 1);
		}
	}
	return cnt;
}

int main(void)
{
	int N, M;
	int i;
	int* items;
	int* bucket;

	scanf("%d %d", &N, &M);
	items = (int*)malloc(sizeof(int) * N);
	bucket = (int*)malloc(sizeof(int) * M);

	for (i = 0; i < N; i++)
		scanf("%d", &items[i]);

	printf("%d\n", pick(items, N, bucket, M, M));
}

/*기본 조합
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

int pick(int* items, int itemSize, int* bucket, int bucketSize, int k)
{
	int i, lastIndex, smallest;
	int cnt = 0;

	if (k == 0) {
		for (i = 0; i < bucketSize; i++)
			printf("%d ", items[bucket[i]]);
		printf("\n");

		return 1;
	}

	lastIndex = bucketSize - k - 1;

	if (bucketSize == k)
		smallest = 0;
	else
		smallest = bucket[lastIndex] + 1;

	for (i = smallest; i < itemSize; i++) {
		bucket[lastIndex + 1] = i;
		cnt += pick(items, itemSize, bucket, bucketSize, k - 1);
	}

	return cnt;
}

int main(void)
{
	int N, M;
	int i;
	int* items;
	int* bucket;

	scanf("%d %d", &N, &M);
	items = (int*)malloc(sizeof(int) * N);
	bucket = (int*)malloc(sizeof(int) * M);

	for (i = 0; i < N; i++)
		scanf("%d", &items[i]);

	printf("%d\n", pick(items, N, bucket, M, M));
}
*/

/*2차원 동적 배열 사용
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

int count = 0;

void pick(int* items, int itemSize, int* bucket, int bucketSize, int** stor, int k)
{
	int smallest, lastIndex, i,j, same, ok;

	if (k == 0) {
		ok = 0;
		for (i = 0; i < count; i++) {
			same = 1;
			for (j = 0; j < bucketSize; j++) {
				if (stor[i][j] != items[bucket[j]]) {
					same = 0;
					break;
				}
			}

			if (same == 0)
				ok++;
		}

		if (ok == count) {
			for (i = 0; i < bucketSize; i++)
				printf("%d ", items[bucket[i]]);
			printf("\n");

			for (i = 0; i < bucketSize; i++)
				stor[count][i] = items[bucket[i]];

			count++;
		}
	}
	else {
		lastIndex = bucketSize - k - 1;

		if (k == bucketSize)
			smallest = 0;
		else
			smallest = bucket[lastIndex] + 1;

		for (i = smallest; i < itemSize; i++) {
			bucket[lastIndex + 1] = i;
			pick(items, itemSize, bucket, bucketSize, stor, k - 1);
		}
	}
}

int main(void)
{
	int num, groupNum, i, j;
	int* items, * bucket, **stor;

	scanf("%d %d", &num, &groupNum);

	bucket = (int*)malloc(sizeof(int) * groupNum);
	
	items = (int*)malloc(sizeof(int) * num);
	for (i = 0; i < num; i++)
		scanf("%d", &items[i]);
	
	stor = (int**)malloc(sizeof(int) * 100);//그동안 나온 리스트들 저장용
	for (i = 0; i < 100; i++)
		stor[i] = (int*)malloc(sizeof(int) * groupNum);

	for (i = 0; i < 100; i++) //0으로 초기화
		for (j = 0; j < groupNum; j++)
			stor[i][j] = 0;
	
	pick(items, num, bucket, groupNum, stor, groupNum);
	printf("%d\n", count);

	free(bucket);
	free(items);
	for (i = 0; i < groupNum; i++)
		free(stor[i]);
	free(stor);
}
*/
